<#
.SYNOPSIS
    Prepares a Windows VM for malware analysis by disabling security features and enabling logging.
.DESCRIPTION
    This script configures a Windows system for malware analysis by:
    - Disabling Windows Defender (optional)
    - Disabling SmartScreen
    - Enabling crash dumps
    - Enabling command line logging
    - Configuring PowerShell logging
    - Installing/Configuring Sysmon (if present)
.NOTES
    File Name      : Prepare-MalwareAnalysisEnv.ps1
    Author         : Your Name
    Prerequisite  : PowerShell 5.1 or later, Administrator privileges
    Warning        : Disabling security features increases system vulnerability!
#>

#Requires -RunAsAdministrator

# Configuration Variables
$TranscriptPath = "C:\Logs\PS"
$SysmonPath = "C:\Sysmon\Sysmon.exe"
$SysmonConfig = "C:\Sysmon\sysmon_config.xml"

# Initialize
$ErrorActionPreference = "Stop"
$WarningPreference = "Continue"
$ProgressPreference = "SilentlyContinue"
$StartTime = Get-Date
$LogFile = "$PSScriptRoot\MalwareAnalysisPrep_$(Get-Date -Format 'yyyyMMdd-HHmmss').log"

function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO",
        [string]$Color = "White"
    )
    
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry = "[$Timestamp] [$Level] $Message"
    
    Add-Content -Path $LogFile -Value $LogEntry
    Write-Host $LogEntry -ForegroundColor $Color
}

function Test-RegistryValue {
    param (
        [string]$Path,
        [string]$Name
    )
    
    try {
        $Value = Get-ItemProperty -Path $Path -Name $Name -ErrorAction Stop
        return $true
    } catch {
        return $false
    }
}

# Start logging
Write-Log "Starting Windows VM preparation for Malware Analysis..." -Level "INFO" -Color "Cyan"
Write-Log "Log file: $LogFile" -Level "INFO" -Color "Gray"

try {
    # Disable Windows Defender (Optional - Risky)
    Write-Log "Disabling Windows Defender..." -Level "INFO" -Color "Cyan"
    try {
        Set-MpPreference -DisableRealtimeMonitoring $true -ErrorAction Stop
        Set-MpPreference -DisableIOAVProtection $true -ErrorAction Stop
        Set-MpPreference -DisableBehaviorMonitoring $true -ErrorAction Stop
        Set-MpPreference -DisableBlockAtFirstSeen $true -ErrorAction Stop
        Set-MpPreference -DisableScriptScanning $true -ErrorAction Stop
        Write-Log "Windows Defender disabled successfully." -Level "SUCCESS" -Color "Green"
    } catch {
        Write-Log "Failed to disable Windows Defender: $_" -Level "WARNING" -Color "Yellow"
    }

    # Disable SmartScreen
    Write-Log "Disabling SmartScreen..." -Level "INFO" -Color "Cyan"
    try {
        Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Explorer" -Name "SmartScreenEnabled" -Value "Off" -ErrorAction Stop
        Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Explorer" -Name "EnableSmartScreen" -Value 0 -ErrorAction Stop
        Write-Log "SmartScreen disabled successfully." -Level "SUCCESS" -Color "Green"
    } catch {
        Write-Log "Failed to disable SmartScreen: $_" -Level "WARNING" -Color "Yellow"
    }

    # Enable full crash dumps
    Write-Log "Configuring crash dumps..." -Level "INFO" -Color "Cyan"
    try {
        if (-not (Test-Path "HKLM:\SYSTEM\CurrentControlSet\Control\CrashControl")) {
            New-Item -Path "HKLM:\SYSTEM\CurrentControlSet\Control\CrashControl" -Force | Out-Null
        }
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\CrashControl" -Name "CrashDumpEnabled" -Value 1 -ErrorAction Stop
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\CrashControl" -Name "DumpFile" -Value "%SystemRoot%\MEMORY.DMP" -ErrorAction Stop
        Write-Log "Full crash dumps configured successfully." -Level "SUCCESS" -Color "Green"
    } catch {
        Write-Log "Failed to configure crash dumps: $_" -Level "WARNING" -Color "Yellow"
    }

    # Enable command line logging
    Write-Log "Enabling command line logging..." -Level "INFO" -Color "Cyan"
    try {
        if (-not (Test-Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System\Audit")) {
            New-Item -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System\Audit" -Force | Out-Null
        }
        Set-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\Policies\System\Audit" -Name "ProcessCreationIncludeCmdLine_Enabled" -Value 1 -ErrorAction Stop
        Write-Log "Command line logging enabled successfully." -Level "SUCCESS" -Color "Green"
    } catch {
        Write-Log "Failed to enable command line logging: $_" -Level "WARNING" -Color "Yellow"
    }

    # Enable PowerShell logging
    Write-Log "Configuring PowerShell logging..." -Level "INFO" -Color "Cyan"
    try {
        $psLoggingPath = "HKLM:\Software\Policies\Microsoft\Windows\PowerShell"
        
        # Script Block Logging
        if (-not (Test-Path "$psLoggingPath\ScriptBlockLogging")) {
            New-Item -Path "$psLoggingPath\ScriptBlockLogging" -Force | Out-Null
        }
        Set-ItemProperty -Path "$psLoggingPath\ScriptBlockLogging" -Name "EnableScriptBlockLogging" -Value 1 -ErrorAction Stop
        
        # Module Logging
        if (-not (Test-Path "$psLoggingPath\ModuleLogging")) {
            New-Item -Path "$psLoggingPath\ModuleLogging" -Force | Out-Null
        }
        Set-ItemProperty -Path "$psLoggingPath\ModuleLogging" -Name "EnableModuleLogging" -Value 1 -ErrorAction Stop
        
        # Transcription
        if (-not (Test-Path "$psLoggingPath\Transcription")) {
            New-Item -Path "$psLoggingPath\Transcription" -Force | Out-Null
        }
        Set-ItemProperty -Path "$psLoggingPath\Transcription" -Name "EnableTranscripting" -Value 1 -ErrorAction Stop
        Set-ItemProperty -Path "$psLoggingPath\Transcription" -Name "OutputDirectory" -Value $TranscriptPath -ErrorAction Stop
        Set-ItemProperty -Path "$psLoggingPath\Transcription" -Name "EnableInvocationHeader" -Value 1 -ErrorAction Stop
        
        # Create log directory
        if (-not (Test-Path $TranscriptPath)) {
            New-Item -ItemType Directory -Path $TranscriptPath -Force | Out-Null
        }
        
        Write-Log "PowerShell logging configured successfully." -Level "SUCCESS" -Color "Green"
    } catch {
        Write-Log "Failed to configure PowerShell logging: $_" -Level "WARNING" -Color "Yellow"
    }

    # Configure Sysmon if installed
    Write-Log "Checking for Sysmon..." -Level "INFO" -Color "Cyan"
    try {
        if (Test-Path $SysmonPath) {
            if (Test-Path $SysmonConfig) {
                & $SysmonPath -i $SysmonConfig
                Write-Log "Sysmon installed and configured successfully with provided config." -Level "SUCCESS" -Color "Green"
            } else {
                & $SysmonPath -i -accepteula
                Write-Log "Sysmon installed with default configuration (no config file found)." -Level "SUCCESS" -Color "Green"
            }
        } else {
            Write-Log "Sysmon not found at $SysmonPath. Skipping Sysmon configuration." -Level "WARNING" -Color "Yellow"
        }
    } catch {
        Write-Log "Failed to configure Sysmon: $_" -Level "WARNING" -Color "Yellow"
    }

    # Additional useful settings for malware analysis
    Write-Log "Configuring additional malware analysis settings..." -Level "INFO" -Color "Cyan"
    try {
        # Disable Windows Error Reporting
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting" -Name "Disabled" -Value 1 -ErrorAction Stop
        
        # Show file extensions
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "HideFileExt" -Value 0 -ErrorAction Stop
        
        # Show hidden files
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "Hidden" -Value 1 -ErrorAction Stop
        
        # Disable UAC
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -Value 0 -ErrorAction Stop
        
        Write-Log "Additional malware analysis settings configured successfully." -Level "SUCCESS" -Color "Green"
    } catch {
        Write-Log "Failed to configure additional settings: $_" -Level "WARNING" -Color "Yellow"
    }

    $EndTime = Get-Date
    $Duration = $EndTime - $StartTime
    Write-Log "Malware analysis environment preparation completed in $($Duration.TotalSeconds) seconds." -Level "INFO" -Color "Green"
    Write-Log "Log file saved to: $LogFile" -Level "INFO" -Color "Gray"
    
} catch {
    Write-Log "FATAL ERROR: $_" -Level "ERROR" -Color "Red"
    Write-Log "Stack Trace: $($_.ScriptStackTrace)" -Level "ERROR" -Color "Red"
    exit 1
}
