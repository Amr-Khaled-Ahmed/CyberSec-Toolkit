<#
.SYNOPSIS
    Enhanced File Scanner with Malware Detection
.DESCRIPTION
    Scans multiple file types for suspicious content and metadata patterns
.NOTES
    Version: 2.0
    Author: Amr-Khaled-Ahmed
    Requires: ExifTool (https://exiftool.org/)
#>

# Configuration
$config = @{
    ExifToolPath = "path\\to\\exiftoll.exe"
    ScanDirectory = $PWD.Path  # Current directory by default
    OutputDir = "ScanResults_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
}

# Supported file extensions with wildcards
$fileTypes = @{
    Images    = @("*.jpg", "*.jpeg", "*.png", "*.gif", "*.tiff", "*.bmp", "*.webp", "*.heic")
    Videos    = @("*.mp4", "*.mov", "*.avi", "*.mkv", "*.wmv", "*.flv", "*.webm", "*.mpg", "*.mpeg", "*.m4v", "*.3gp")
    Documents = @("*.pdf", "*.docx", "*.pptx", "*.xlsx", "*.odt", "*.doc", "*.ppt", "*.xls", "*.rtf", "*.txt")
    Audio     = @("*.mp3", "*.wav", "*.flac", "*.aac", "*.ogg", "*.wma", "*.m4a")
    Archives  = @("*.zip", "*.rar", "*.7z", "*.tar", "*.gz")
    Executables = @("*.exe", "*.dll", "*.sys", "*.msi", "*.bat", "*.ps1", "*.vbs", "*.js")
}

# Malicious patterns to detect
$maliciousPatterns = @(
    "hack", "script", "malware", "exploit", "payload", "meterpreter",
    "powershell", "cmd", "vbs", "exe", "dll", "ps1", "bat", "js",
    "javascript", "shellcode", "backdoor", "trojan", "virus", "worm",
    "ransomware", "spyware", "keylogger", "rootkit", "cryptominer",
    "phishing", "scam", "fake", "stealer", "inject", "bypass", "obfuscate",
    "encoded", "base64", "xor", "reverse_shell", "bind_shell",
    "c2", "command_and_control", "cnc", "botnet", "rat"
)

# Create output directory
New-Item -ItemType Directory -Path $config.OutputDir -Force | Out-Null

# Get all files with supported extensions
try {
    $allFiles = @()
    foreach ($type in $fileTypes.Keys) {
        $foundFiles = Get-ChildItem -Path $config.ScanDirectory -Recurse -File -Include $fileTypes[$type] -ErrorAction SilentlyContinue
        if ($foundFiles) {
            $allFiles += $foundFiles
        }
    }

    if ($allFiles.Count -eq 0) {
        Write-Host "‚Ñπ No supported files found in: $($config.ScanDirectory)" -ForegroundColor Yellow
        Write-Host "üîç Supported extensions:" -ForegroundColor Cyan
        $fileTypes.GetEnumerator() | ForEach-Object {
            Write-Host "  $($_.Key): $($_.Value -join ', ')" -ForegroundColor Cyan
        }
        exit
    }

    Write-Host "‚úÖ Found $($allFiles.Count) files to scan" -ForegroundColor Green
}
catch {
    Write-Host "‚ùå Error searching for files: $_" -ForegroundColor Red
    exit
}

# Initialize results
$allResults = @()
$maliciousCount = 0
$suspiciousCount = 0
$cleanCount = 0

Write-Host "üîç Beginning scan of $($allFiles.Count) files..."

foreach ($file in $allFiles) {
    # Determine file type
    $fileType = $fileTypes.Keys | Where-Object { $fileTypes[$_] -contains "*$($file.Extension)" } | Select-Object -First 1
    if (-not $fileType) { $fileType = "Unknown" }

    Write-Host "‚û° Scanning [$fileType]: $($file.Name)"
    
    # Initialize result object
    $result = [PSCustomObject]@{
        FileName        = $file.Name
        FilePath       = $file.FullName
        FileType       = $fileType
        FileSize       = "$([math]::Round($file.Length/1KB)) KB"
        FileHash       = (Get-FileHash -Path $file.FullName -Algorithm SHA256).Hash
        LastModified   = $file.LastWriteTime
        Status         = "Clean"
        Reasons        = @()
        SuspiciousTags = @()
        AnalysisNotes  = @()
    }

    # ========== COMMON CHECKS ==========
    $suspiciousReasons = @()

    # Check for double extensions
    if ($file.Name -match '\.[^\.]+\.[a-z0-9]{2,4}$') {
        $suspiciousReasons += "Double file extension"
        $result.SuspiciousTags += "DoubleExtension"
    }
    
    # Check file size anomalies
    if ($file.Length -lt 100KB) {
        $suspiciousReasons += "Unusually small file ($([math]::Round($file.Length/1KB)) KB)"
        $result.SuspiciousTags += "SmallFile"
    } elseif ($file.Length -gt 500MB) {
        $suspiciousReasons += "Unusually large file ($([math]::Round($file.Length/1MB)) MB)"
        $result.SuspiciousTags += "LargeFile"
    }

    # ========== METADATA ANALYSIS ==========
    if ($fileType -in @("Images", "Videos", "Audio", "Documents")) {
        try {
            if (Test-Path $config.ExifToolPath) {
                $rawOutput = & $config.ExifToolPath -j -ee -u $file.FullName | ConvertFrom-Json -ErrorAction Stop
                
                if ($rawOutput) {
                    $metadata = $rawOutput[0]
                    
                    # Check for suspicious MIME type mismatch
                    if ($metadata.MIMEType -and -not ($metadata.MIMEType -like "$($fileType.ToLower())/*")) {
                        $suspiciousReasons += "MIME type mismatch ($($metadata.MIMEType))"
                        $result.SuspiciousTags += "MIMEType"
                    }
                    
                    # Check for malicious patterns in metadata
                    foreach ($field in $metadata.PSObject.Properties.Name) {
                        $fieldValue = $metadata.$field
                        if ($fieldValue -and $fieldValue -is [string]) {
                            foreach ($pattern in $maliciousPatterns) {
                                if ($fieldValue -match $pattern) {
                                    $suspiciousReasons += "Suspicious pattern '$pattern' in $field"
                                    $result.SuspiciousTags += $field
                                    break
                                }
                            }
                        }
                    }
                }
            } else {
                $result.AnalysisNotes += "ExifTool not found at configured path"
            }
        } catch {
            $result.AnalysisNotes += "Metadata extraction error: $($_.Exception.Message)"
        }
    }

    # ========== DETERMINE FILE STATUS ==========
    if ($result.SuspiciousTags.Count -gt 0) {
        $result.Status = "Suspicious"
        $result.Reasons = $suspiciousReasons -join "; "
        $suspiciousCount++
        
        # Check if definitely malicious
        if ($result.SuspiciousTags -match "payload|exploit|trojan|ransomware|shellcode") {
            $result.Status = "Malicious"
            $maliciousCount++
        }
    } else {
        $cleanCount++
    }

    $allResults += $result
}

# ========== OUTPUT RESULTS ==========
$outputCsv = Join-Path -Path $config.OutputDir -ChildPath "scan_results.csv"
$allResults | Export-Csv -Path $outputCsv -NoTypeInformation -Encoding UTF8

# Summary Report
$summary = @"
üìä SCAN SUMMARY
===============
üìÇ Scanned Directory: $($config.ScanDirectory)
üìÇ Total Files Scanned: $($allFiles.Count)
‚úÖ Clean Files: $cleanCount
‚ö† Suspicious Files: $suspiciousCount
‚ùå Malicious Files: $maliciousCount

üîç Suspicious/Malicious files represent $([math]::Round(($suspiciousCount+$maliciousCount)/$allFiles.Count*100, 2))% of files
"@

# Display summary in terminal
Write-Host ""
Write-Host $summary -ForegroundColor Cyan
Write-Host ""
Write-Host "üìÑ Detailed results saved to: $outputCsv" -ForegroundColor Green

# Save summary to file
$summary | Out-File -FilePath (Join-Path -Path $config.OutputDir -ChildPath "scan_summary.txt")

# Display top suspicious tags if any were found
if ($suspiciousCount -gt 0 -or $maliciousCount -gt 0) {
    $topTags = $allResults.SuspiciousTags | Group-Object | Sort-Object Count -Descending | Select-Object -First 5 -Property Name,Count
    Write-Host ""
    Write-Host "üîé TOP SUSPICIOUS INDICATORS:" -ForegroundColor Yellow
    $topTags | Format-Table -AutoSize | Out-String | Write-Host
}

# Open results directory if on Windows
if ($IsWindows -or $ENV:OS -match "Windows") {
    explorer $config.OutputDir
}
